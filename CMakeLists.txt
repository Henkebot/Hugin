set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMakeModules )

include(HuginMacros)
include(CheckIncludeFiles)

##  global setup
project(hugin)

# version
set(V_MAJOR 0)
set(V_MINOR 7)
set(V_PATCH 1)

#FIND_PACKAGE(BISON REQUIRED)
#FIND_PACKAGE(FLEX REQUIRED)

# find dependencies
FIND_PACKAGE(PkgConfig)
FIND_PACKAGE(TIFF REQUIRED)
FIND_PACKAGE(JPEG REQUIRED)
FIND_PACKAGE(PANO13)
#FIND_PACKAGE(PANO12)

IF(PANO13_FOUND)
  SET(PANO_INCLUDE_DIR ${PANO13_INCLUDE_DIR})
  SET(PANO_LIBRARIES ${PANO13_LIBRARIES})
ELSE(PANO13_FOUND)
  IF(PANO12_FOUND)
    SET(PANO_INCLUDE_DIR ${PANO12_INCLUDE_DIR})
    SET(PANO_LIBRARIES ${PANO12_LIBRARIES})
  ELSE(PANO12_FOUND)
    MESSAGE(FATAL_ERROR "libpano13 or libpano12 not found")
  ENDIF(PANO12_FOUND)
ENDIF(PANO13_FOUND)

FIND_PACKAGE(PNG REQUIRED)
FIND_PACKAGE(OpenEXR)

IF (OPENEXR_FOUND)
include_directories(${OPENEXR_INCLUDE_DIR})
ENDIF (OPENEXR_FOUND)

FIND_PACKAGE(Boost REQUIRED)

SET(wxWidgets_USE_LIBS base core xrc)
FIND_PACKAGE(wxWidgets REQUIRED)
IF(NOT wxWidgets_FOUND)
  MESSAGE("wxWidgets was not found, GUI (hugin, nona_gui) disabled")
ENDIF(NOT wxWidgets_FOUND) 

FIND_PACKAGE(MSGFMT REQUIRED)
IF(MSGFMT_FOUND)
  MESSAGE(STATUS "Program msgfmt found (${MSGFMT_EXECUTABLE})")
ENDIF(MSGFMT_FOUND)

pkg_check_modules(VIPS vips-7.12)
LIST2STRING(VIPS_CFLAGS_OTHER VIPS_CFLAGS_OTHER_STRING)
LIST2STRING(VIPS_LDFLAGS_OTHER VIPS_LDFLAGS_OTHER_STRING)

pkg_check_modules(VIPSCC vipsCC-7.12)
LIST2STRING(VIPSCC_CFLAGS_OTHER VIPSCC_CFLAGS_OTHER_STRING)
LIST2STRING(VIPSCC_LDFLAGS_OTHER VIPSCC_LDFLAGS_OTHER_STRING)

MESSAGE("tiff libraries: ${TIFF_LIBRARIES}")
MESSAGE("tiff include dir: ${TIFF_INCLUDE_DIR}")

#BUILD SETUP
IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING
      "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."
      FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)

#None, Debug, Release, or custom ones
#IF(WANT_DEBUG)
#  MESSAGE("Enabled Debug build")
#  SET(CMAKE_BUILD_TYPE Debug)
#  ADD_DEFINITIONS(-DDEBUG)
#ELSE(WANT_DEBUG)
#  SET(CMAKE_BUILD_TYPE Release)
#ENDIF(WANT_DEBUG)

IF(CMAKE_BUILD_MODE STREQUAL "Debug")
  MESSAGE("Building in Debug mode, resulting programs will be SLOW")
  ADD_DEFINITIONS(-DDEBUG)
ENDIF(CMAKE_BUILD_MODE STREQUAL "Debug")

#IF(UNIX)
#  SET(CMAKE_CXX_FLAGS_RELEASE "-O2 -Wall" CACHE)
#  SET(CMAKE_C_FLAGS_RELEASE "-O2 -Wall" CACHE)
#  SET(CMAKE_CXX_FLAGS_DEBUG "-g3 -O0 -Wall -DDEBUG" CACHE)
#  SET(CMAKE_C_FLAGS_DEBUG "-g3 -O0 -Wall -DDEBUG" CACHE)
#ENDIF(UNIX)

IF (UNIX)
  # define destination dirs (relative to prefix)
  SET(DATADIR share/hugin)
  SET(BINDIR  bin)
  SET(ICONDIR share/icons) 
  SET(LINKDIR share/applications)

  # backward compatibility
  SET(INSTALL_XRC_DIR ${CMAKE_INSTALL_PREFIX}/share/hugin/xrc)
ELSEIF (WIN32)
  SET(DATADIR xrc)
  SET(BINDIR  "")
  SET(ICONDIR  "")
  SET(LINKDIR  "")

  # backward compatibility
  SET(INSTALL_XRC_DIR xrc)
  SET(INSTALL_LOCALE_DIR locale)
ELSEIF(APPLE)
  MESSAGE("WARNING: installation for OSX not yet supported")
ENDIF(UNIX)

# create config.h file
configure_file(src/hugin_config.h.in.cmake ${CMAKE_BINARY_DIR}/src/hugin_config.h)

# setup some common compilation flags
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})

INCLUDE_DIRECTORIES(${PANO_INCLUDE_DIRS})

LINK_DIRECTORIES( ${VIPSCC_LIBRARY_DIRS} )
INCLUDE_DIRECTORIES( ${VIPSCC_INCLUDE_DIRS} )

add_subdirectory(src)
