The main focus of this design is to build simple yet extensible framework that allows speedy initial implementation and future extension. While it is still possible to build GUI without much frameworking, I believe future extendibility and maintainability would significantly increases if the foundation is designed right.


QDocumentManager
 This class is pretty much the main controller of the application. Opens the file with document class, keeps track of all documents, provides recent files etc.

QDocument
 Represents a document, manages the path, file type saving logic etc. as well as things like undo manager, window managers for that document.

AppBase::DocumentData
 Already defined. Used by the document class.

HQModule
 Hugin Modules. Provides the views that inherits QWidget. Each module does one specific task. Module classes act as controller classes; view classes should be as simple as possible and only interact with the module classes.

HQViewManager
 This is a version of window manager. Manages the views from modules and displays on appropriate windows according to the layout manager/profiles.

HQLayoutProfile
 This class specifies the role of modules. The modules are listed by major roles (main, sub, etc.), and main modules are further in groups (workflow, category etc.). This determines how user would navigate modules. Modules can be listed more than once. User customisable in the future.

HQLayoutManager
 This class determines how to display views according to the layout profile. The old GUI for example could be seen as main modules in tabs and utility modules (preview) in separate window. Several versions possible in the future.

